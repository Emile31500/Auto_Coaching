<% title = "Child Template" %>

<%- contentFor('main') %>
<h2 class="my-5">Nutrition</h2>
<div class="col">
    <h3 class="my-5"> Besoins </h3>

    <form id="ateAlimentsForm" class="row">
      <p>
        <div class="col-1">
          <label class="" for="dateAteAliments">Date : </label>
        </div>
        <div class="col-2">
          <input type="date" class="form-control " id="dateAteAliments"/>
        </div>
      </p>
      <p>
      <input type="submit" class="btn btn-primary" id="dateAteAlimentsSubmit"> 
      </p>

    </form> 

    <table class="table table-bordered">
      <thead>
        <tr>
          <th scope="col"></th>
          <th scope="col">Besoin</th>
          <th scope="col">Mangé</th>
          <th scope="col">En pourcentage</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th scope="row">Energie</th>
          <td> kcal </td>
          <td> <span id="kcalAteAbs"></span> kcal </td>
          <td> % </td>
        </tr>
        <tr>
          <th scope="row">Proteine</th>
          <td> g </td>
          <td> <span id="protAteAbs"></span> g </td>
          <td> % </td>
        </tr>
        <tr>
          <th scope="row">Lipide</th>
          <td> g </td>
          <td> <span id="fatAteAbs"></span> g </td>
          <td> % </td>
        </tr>
      </tbody>
    </table>
    <div class="alert my-3 d-none" id="nutrition-alert" role="alert">
    </div>
    <h3 class="my-5 ">Aliments </h3>
    <table class="table table-striped my-3">
        <thead class="table-dark">
          <tr>
            <th scope="col">Nom </th>
            <th scope="col">Kcalorie</th>
            <th scope="col">Glucide</th>
            <th scope="col">Proteine</th>
            <th scope="col">Lipide</th>
            <th scope="col"><input type="date" id="ateFoodDate" class="form-control"/></th>
          </tr>
        </thead>
        <tbody>
          <% for(var i=0; i<food.length; i++) {%>
            <tr>
              <th scope="row"><%= food[i].name %></th>
              <td> <%=  parseFloat(food[i].carbohydrate *4+ food[i].proteine *4 + food[i].fat*9).toFixed(1)  %> kcal </td>
              <td> <%= food[i].carbohydrate %> g </td>
              <td> <%= food[i].proteine %> g </td>
              <td> <%= food[i].fat %> g </td>
              <td>
                <form action="/food/eat" class="alimentForms" method="post">
                  <div class="row"  style="max-width: 200px;">
                    <input type="number" name="foodId" hidden value=<%= food[i].id %> >
                    <div class="col">
                      <input type="number" name="weight" class="form-control" placeholder="g / ml">
                    </div>
                    <div class="col-3">
                      <input type="submit" class="btn btn-primary" value="+"/>
                    </div>
                  </div>
                </form>
              </td>
            </tr>
          <% } %>
        </tbody>
      </table>
</div>
<script>
  
  let alimentForms = document.querySelectorAll('.alimentForms');
  let nutrition_alert = document.querySelector('#nutrition-alert');
  let protAteAbs = document.querySelector("#protAteAbs");
  let kcalAteAbs = document.querySelector("#kcalAteAbs");
  let fatAteAbs = document.querySelector("#fatAteAbs");
  let ateAlimentsForm = document.querySelector("#ateAlimentsForm");
  let dateAteAliments = document.querySelector("#dateAteAliments"); 
  let ttlMacro, ttlMacroPromise;
    
  function getTodayDate(date = undefined) {

    let date_ob;

    if (date){

      date_ob = new Date(date);
      
    } else {

      date_ob = new Date();

    }

    let day = ("0" + date_ob.getDate()).slice(-2);
    let month = ("0" + (date_ob.getMonth()+1)).slice(-2);
    let year = date_ob.getFullYear();

    return (year + "-" + month + "-" + day + ' 00:00:00');

  }

  const currentDate = getTodayDate();

  ateAlimentsForm.addEventListener('submit', function (event) {
    
    event.preventDefault()

    let currentDate = getTodayDate(dateAteAliments.value)
    
    calculateAteFood(currentDate);


  });

  async function getEatingAliment(daySearched){
    

    let currentDate = getTodayDate(daySearched);

    let endDate = new Date(currentDate).getFullYear() + "-" + (new Date (currentDate).getMonth()+1) + "-" + (new Date (currentDate).getDate()+1) + ' 00:00:00';
    console.log(endDate);    
    
    let url = "/food/eat?dateStart=" + daySearched + "&dateEnd=" + endDate;

    const promise = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    }).catch(error => {

      console.log('error');

    });

    let data = await promise.json();
    return data;

  }
  
  function calculateAteFood(currentDate){

    if (!currentDate){

      currentDate = getTodayDate();

    }

    let ttlProt = 0, ttlCarbo = 0, ttlFat = 0, ttlTransFat = 0, ttlEnergie = 0;
    getEatingAliment(currentDate).then(eatenAliments => { 

      if (eatenAliments) {

        ttlMacroPromise = eatenAliments.forEach(eatenAliment => {

          let promise = getThisFood(eatenAliment.foodId).then(food => { 
            if (food) {

              ttlProt += food.proteine * (eatenAliment.weight / 100)
              ttlFat += food.fat * (eatenAliment.weight / 100)
              ttlTransFat += food.trans_fat * (eatenAliment.weight / 100)
              ttlCarbo += food.carbohydrate * (eatenAliment.weight / 100)
              ttlEnergie = ttlFat*9 + ttlCarbo*4 + ttlProt*4;

              let data = JSON.stringify({ 
                      "energie": ttlEnergie,
                      "proteine": ttlProt,
                      "carbohydrate": ttlCarbo,
                      "fat": ttlFat
                    });

              printMacroOnDashbord(data);
            
            } else {
              console.log('No data or an error occurred.');
            }

            }).catch(error => {
              console.error('An unexpected error occurred:', error);
          });

          let res = promise;
          return res;

        });

      } else {

        console.log('No data or an error occurred.');

      }

    }).catch(error => {console.error('An unexpected error occurred:', error);});
  
  }

  calculateAteFood(currentDate);

  async function getThisFood(id)
  {
      try {
        const response = await fetch('/food?id=' + id, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error('Network response was not OK');
        }

        const data = await response.json();
        return data;

      } catch (error) {

        console.error('Error:', error);
        return null;

      }
  }

  function printMacroOnDashbord(ttlMacro)
  {

    ttlMacro = JSON.parse(ttlMacro)

    protAteAbs.innerHTML = Math.round((ttlMacro.proteine) * 10) / 10;
    kcalAteAbs.innerHTML = Math.round((ttlMacro.energie) * 10) / 10;;
    fatAteAbs.innerHTML = Math.round((ttlMacro.fat) * 10) / 10;;

    return true;

  }

  alimentForms.forEach(form => {

    form.addEventListener("submit", async function(e){

      e.preventDefault();
      data = new FormData(this);

      let ateFoodDate = document.querySelector('#ateFoodDate').value

      if (!ateFoodDate) {

        ateFoodDate = currentDate;

      }

      var raw = JSON.stringify({
            "foodId": parseInt(data.get("foodId")),
            "weight": parseInt(data.get("weight")),
            "createdAt": currentDate,
            "updatedAt": currentDate
          })
          
      fetch('/food/eat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: raw

      }).then(response => {

          calculateAteFood(currentDate);
          nutrition_alert.innerHTML = "Votre aliment a bien été enregistré";
          nutrition_alert.classList.add('alert-success');
          nutrition_alert.classList.remove('alert-danger');
          nutrition_alert.classList.remove('d-none');

          if(response.status == 201){

            let interv = setInterval(function (){

              nutrition_alert.classList.add('d-none');
              clearInterval(interv);

            }, 2000);
            

          } else {

            nutrition_alert.innerHTML = "Erreur : " // + response.message;

            nutrition_alert.classList.remove('d-none');
            nutrition_alert.classList.remove('alert-success');
            nutrition_alert.classList.add('alert-danger');

          }

          return response.json();

      }).then(data => {
        
        if(data['message'] != undefined) {

          nutrition_alert.innerHTML = '<b>Erreure :</b> <br>' + data['message']+ '';


        }

      }).catch(error => {

        nutrition_alert.innerHTML = "Erreur : " // + error.message;
        nutrition_alert.classList.remove('d-none');
        nutrition_alert.classList.remove('alert-success');
        nutrition_alert.classList.add('alert-danger');

      });
    });
  });

</script>
